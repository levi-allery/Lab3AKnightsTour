/**
 * Created by leviallery on 11/9/16.
 */

import java.util.Stack;

public class Board {
    //Variables
    int size = 0;
    char[][] board; // Board will be displayed as a character board
    int moves = 0;
    int location = 0;
    int xMove[] = {2, 1, -1, -2, -2, -1, 1, 2};  // X direction moves
    int yMove[] = {1, 2, 2, 1, -1, -2, -2, -1}; // Y direction moves
    Stack moveLocation = new Stack(); // Holds different location that knight has been
    int[] visited; // Used to show which locations were visited but didn't solve puzzle

    Board(int s, int p) {
        size = s;
        location = p;
        board = new char[size][size];
        visited = new int[(size*size)];
        reset();
    }

    public void print() { // Print out the board
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.print("\n");
        }
        System.out.println();
    }

    public boolean isEmpty(int location) { // See if spot is empty
        int x = (location - 1) % size;
        int y = (location - 1) / size;
        if (board[y][x] == 'K') {
            return false;
        } else {
            return true;
        }
    }

    public void move(int x, int y) {
        moveLocation.push(location);
        boolean done = false;
        while (!done) {
            for (int i = 0; i < 8; i++) {
                if ((x + xMove[i]) >= 0 && (x + xMove[i]) < size && (y + yMove[i]) >= 0 && (y + yMove[i]) < size) { //Check to see if move is off board
                    //Move is on board
                    location = ((y + yMove[i]) * size);
                    location += ((x + xMove[i]) + 1); //Get this new location
                    if (isEmpty(location) && !haveVisted(location)) {//See if this spot is already taken or was the last one visited
                        x += xMove[i]; // X new position
                        y += yMove[i];// Y new position
                        location = (y * size);
                        location += (x + 1); // move to new location
                        moveLocation.push(location); // Push location on the stack
                        board[y][x] = 'K'; // Show board with spot taken
                        print();
                        moves++; // Add # of moves
                        i = -1; //If we moved keep going with new spot
                    }
                    else{}
                }else{//Move is off board. Go to next move
                }
            }
            //This happens if it runs out of spots to move too
            if (moveLocation.isEmpty() || moveLocation.size() == (size * size)) { //Check to see if we are done
                done = true;
            } else { //We didn't find a solution and have to back track
                board[y][x] = '\u0000'; // Replace K with a blank
                add((int) moveLocation.peek()); // Add spot to an array to show that it's been visited
                moveLocation.pop(); //Remove location from stack
                if (!moveLocation.isEmpty()) {//Check to see if we are at the start position
                    location = (int) moveLocation.peek();
                    x = (location - 1) % size; //New x location
                    y = (location - 1) / size; // New y location
                } else { //If we popped off the start position we failed
                    System.out.println("Failure");
                    System.out.println("Number of moves: " + moves);
                    done = true;
                }
            }
        }
        printAnswer();
    }

    void printAnswer(){
        int i = 0;
        int[] array = new int[size * size];
        while (!moveLocation.isEmpty()) { // get list in order from beginning
            array[i] = (int) moveLocation.peek();
            moveLocation.pop();
            i++;
        }
        System.out.println();
        while (i >= 0) {
            if (array[i] != 0) {
                System.out.print(array[i] + " ");
                i--;
            }else{
                i--;
            }
        }
        System.out.println();
        System.out.println("Number of moves: " + moves);
    }
    boolean haveVisted(int location){
        for (int i = 0; i < visited.length; i++) {
            if(location == visited[i]){
                return true;
            }else{

            }
        }
        return false;
    }
    void add(int x){
        for (int i = 0; i < visited.length; i++) {
            if(visited[i]== 0){
                visited[i] = x;
                return;
            }else{

            }
        }
    }
    void reset(){
        for (int i = 0; i < visited.length; i++) {
            visited[i]=0;
        }
    }
}
